---
title: "Understand Simulations"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
g_mat <- readRDS("/Users/akm41/Dropbox (Partners HealthCare)/Academic_Year_2023-2024/iPGS-methods-development-Westerman-K01/ipgs/data/processed/simulations/g_mat.rds")

#head(g_mat)
```

```{r}
get_maf <- function(g) {mean(g)/2}

mafs <- apply(g_mat,2,get_maf)

hist(mafs)
```

# Understanding how genotype matrix was created

```{r}
min_maf = 0.01
max_maf = 0.5
M = 100
N = 10000
```

```{r}
mafs_modelled <- runif(M, min_maf, max_maf)
hist(mafs_modelled)
```

```{r}
g_mat_modelled <- sapply(mafs_modelled, function(maf) {
    rbinom(N, 2, maf)
  }, simplify = TRUE)

hist(apply(g_mat_modelled,2,get_maf))
```

# Power

```{r}
library(tidyverse)
power_scenario_df <- read_csv("/Users/akm41/Dropbox (Partners HealthCare)/Academic_Year_2023-2024/iPGS-methods-development-Westerman-K01/ipgs/data/processed/simulations/power_scenarios.csv")
power_tags <- power_scenario_df$tag
power_tags
```

```{r}
simulate_scenario <- function(e_var_tot, g_var_tot, gxe_var_tot, 
                              beta_prob_nonzero, 
                              n_sim, tag,
                              g_mat, train_prop) {
  print(paste0("Simulating ", tag, "..."))
  
  N <- nrow(g_mat)
  M <- ncol(g_mat)
  
  sim_df <- tibble(
    id = seq(1, N),
    train = sample(c(0, 1), N, replace = TRUE, 
                   prob = c(1 - train_prop, train_prop)),
    e = rnorm(N, 0, 1)
  )
  
  beta_e <- sqrt(e_var_tot)
  
  beta_g_var <- g_var_tot / M
  beta_g_vec <- rnorm(M, 0, sqrt(beta_g_var)) * (runif(M) < beta_prob_nonzero)
  
  beta_gxe_var <- gxe_var_tot / M
  beta_gxe_vec <- rnorm(M, 0, sqrt(beta_gxe_var)) * (runif(M) < beta_prob_nonzero)
  
  error_var <- 1 - e_var_tot - g_var_tot - gxe_var_tot
  
  y_df <- map(seq(1, n_sim), function(pheno_idx) {
    y_mean_vec <- sim_df$e * beta_e +
      g_mat %*% beta_g_vec +
      (g_mat * sim_df$e) %*% beta_gxe_vec
    rnorm(N, y_mean_vec, sqrt(error_var))
  }) %>%
    setNames(paste0("y", seq(1, n_sim))) %>%
    bind_cols()
  
  target_dir <- paste0("../data/processed/simulations/", tag)
  system(paste0("mkdir -p ", target_dir))
  bind_cols(sim_df, y_df) #%>%
 #   write_csv(paste0(target_dir, "/phenos.csv"))
}


simulate_phenotypes <- function(scenario_df,
                                g_mat,
                                train_prop,
                                seed = 1) {
  
  set.seed(seed)
  
  scenario_df %>%
    rowwise() %>%
    group_walk(~ simulate_scenario(.$e_var_tot, .$g_var_tot, .$gxe_var_tot, 
                                   .$prob_nonzero, 
                                   .$n_sim, .$tag, g_mat, train_prop))
}
```
